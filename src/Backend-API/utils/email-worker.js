const nodemailer = require('nodemailer');
require('dotenv').config()

let emailQueue = [];
let isSendingEmail = false;

const MAX_RETRIES = 2;

const addToEmailQueue = async (mailOptions) => {
  emailQueue.push({ ...mailOptions, retries: 0 });
  if (!isSendingEmail) {
    await sendEmail();
  }
};

const sendEmail = async () => {
  isSendingEmail = true;

  try {
    if (emailQueue.length > 0) {
      const mailOptions = emailQueue.shift();

      const transporter = nodemailer.createTransport({
        host: process.env.MAILGUN_SMTP_SERVER,
        port: process.env.MAILGUN_SMTP_PORT,
        secure: false,
        auth: {
          user: process.env.MAILGUN_SMTP_USERNAME,
          pass: process.env.MAILGUN_SMTP_PASSWORD
        }
      });
      await transporter.sendMail(mailOptions);
      console.log('Email sent successfully');
    }
  } catch (emailError) {
    console.error('Error sending email:', emailError);

    // Check if email can be retried
    if (emailQueue.length > 0 && emailQueue[0].retries < MAX_RETRIES) {
      emailQueue[0].retries++;
      console.log(`Retrying email, attempt #${emailQueue[0].retries}`);
      emailQueue.unshift(emailQueue.shift()); // Move failed email to the front of the queue
    } else {
      // Log the error and move on to the next email
      console.error('Maximum retries reached, moving on to the next email');
    }
  } finally {
    isSendingEmail = false;
    if (emailQueue.length > 0) {
      await sendEmail();
    }
  }
};

const sendConfirmationEmail = async (user, confirmationToken) => {
  try {
    const mailOptions = {
      from: process.env.MAILGUN_SMTP_EMAIL_FROM,
      to: user.email,
      subject: '[LabBooker] Confirm your account',
      html: `Hello ${user.name},
      Click this link to confirm your account: ${process.env.AXIOS_BASE_URL}/confirm/${confirmationToken}
      The link will expire in 1 hour.
      Thank you for registering with LabBooker.
      AUTOGENERATED EMAIL. DO NOT REPLY.
      `
    };

    await addToEmailQueue(mailOptions);
  } catch (err) {
    console.error('Error sending confirmation email:', err);
    throw err;
  }
};

const sendPasswordResetEmail = async (user, resetToken) => {
  const resetUrl = `${process.env.FRONTEND_URL}/reset-password/${resetToken}`;
  console.log('Reset URL generated:', resetUrl);
  try {
    const mailOptions = {
      from: process.env.MAILGUN_SMTP_EMAIL_FROM,
      to: user.email,
      subject: '[LabBooker] Password Reset',
      html: `Hello ${user.name},
      Please click this link to reset your password: ${process.env.AXIOS_BASE_URL}/reset-password/${resetToken}
      The link will expire in 1 hour.
      NOT DONE BY YOU ? Please ignore this email.
      Thank you
      MayankGroup.tech
      AUTOGENERATED EMAIL. DO NOT REPLY.
      `
    };

    await addToEmailQueue(mailOptions);
  } catch (err) {
    console.error('Error sending password reset email:', err);
    throw err;
  }
};

const normalizeEmail = (email) => {
  if(!email ){
    console.error('Email is required');
    return '';
  }
  let normalizedEmail =email.toLowerCase();
  const atIdx=normalizedEmail.lastIndexOf('@');
  const plusIdx=normalizedEmail.lastIndexOf('+');

  if(plusIdx >-1 && plusIdx < atIdx){
    normalizedEmail = normalizedEmail.substring(0, plusIdx) + normalizedEmail.substring(atIdx);
  }

  const [local, domain] = normalizedEmail.split('@');
  if(domain==='gmail.com'){
    normalizedEmail=`${local.replace(/\./g, '')}@${domain}`;
  }
  return normalizedEmail;
};


module.exports = {
  addToEmailQueue,
  sendConfirmationEmail,
  sendPasswordResetEmail,
  normalizeEmail,
};